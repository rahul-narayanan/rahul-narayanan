function sortObject(obj) {
  if (typeof obj !== 'object' || obj === null) {
    return obj;
  }

  if (Array.isArray(obj)) {
    return obj.map(sortObject).sort();
  }

  return Object.keys(obj)
    .sort()
    .reduce((acc, key) => {
      acc[key] = sortObject(obj[key]);
      return acc;
    }, {});
}

function isEquivalent(obj1, obj2) {
  return JSON.stringify(sortObject(obj1)) === JSON.stringify(sortObject(obj2));
}

export function toMatchObjectIgnoringOrder(received, expected) {
  const pass = isEquivalent(received, expected);
  if (pass) {
    return {
      message: () => `Expected objects not to match ignoring order`,
      pass: true,
    };
  } else {
    return {
      message: () => `Expected objects to match ignoring order`,
      pass: false,
    };
  }
}


expect.extend({
  toMatchObjectIgnoringOrder(received, expected) {
    const pass = isEquivalent(received, expected);
    if (pass) {
      return {
        message: () => `Expected objects not to match ignoring order`,
        pass: true,
      };
    } else {
      return {
        message: () => `Expected objects to match ignoring order`,
        pass: false,
      };
    }
  },
});

describe('YourController', () => {
  let service: YourService;

  beforeEach(async () => {
    const moduleRef = await Test.createTestingModule({
      imports: [AppModule],
      providers: [YourService],
    }).compile();

    service = moduleRef.get<YourService>(YourService);
  });

  it('should return the API response', async () => {
    const response = await service.callYourApi();
    const expectedResponse = {
      // Your expected response object here
    };
    expect(response).toMatchObjectIgnoringOrder(expectedResponse);
  });
});
In the toMatchObjectIgnoringOrder custom matcher, we use the isEquivalent function to compare the received and expected objects after sorting their properties. The expect.extend function allows us to add the toMatchObjectIgnoringOrder matcher to the Jest's expect object, making it available for use in our tests.





