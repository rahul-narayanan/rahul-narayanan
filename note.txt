const { Client, createTLSOptions } = require('ldapts');

async function checkUserGroupMembership(username, groupName) {
  try {
    const client = new Client({
      url: 'ldaps://your-ad-server-url',
      tlsOptions: createTLSOptions(),
    });

    await client.bind('your-username', 'your-password');

    // Search for the user's DN
    const userSearchFilter = `(sAMAccountName=${username})`;
    const userSearchOptions = {
      scope: 'sub',
      filter: userSearchFilter,
      attributes: ['dn'],
    };

    const userSearchResult = await client.search('ou=Users,dc=example,dc=com', userSearchOptions);
    const [userEntry] = userSearchResult.entries;

    if (!userEntry) {
      throw new Error('User not found');
    }

    // Search for the group and check membership
    const groupSearchFilter = `(cn=${groupName})`;
    const groupSearchOptions = {
      scope: 'sub',
      filter: groupSearchFilter,
      attributes: ['member'],
    };

    const groupSearchResult = await client.search('ou=Groups,dc=example,dc=com', groupSearchOptions);
    const [groupEntry] = groupSearchResult.entries;

    if (!groupEntry) {
      throw new Error('Group not found');
    }

    const userDN = userEntry.dn.toString();
    const groupMembers = groupEntry.member || [];

    const isMember = groupMembers.some(member => member.toString() === userDN);

    return isMember;
  } catch (error) {
    throw error;
  } finally {
    await client.unbind();
  }
}

(async () => {
  try {
    const username = 'user123';
    const groupName = 'MyGroup';

    const isMember = await checkUserGroupMembership(username, groupName);
    console.log(`Is user ${username} a member of group ${groupName}? ${isMember}`);
  } catch (error) {
    console.error('Error:', error.message);
  }
})();




**************



const { Client, createTLSOptions } = require('ldapts');

async function getUserGroupsStartingWithPrefix(username, prefix) {
  try {
    const client = new Client({
      url: 'ldaps://your-ad-server-url',
      tlsOptions: createTLSOptions(),
    });

    await client.bind('your-username', 'your-password');

    // Search for the user's DN
    const userSearchFilter = `(sAMAccountName=${username})`;
    const userSearchOptions = {
      scope: 'sub',
      filter: userSearchFilter,
      attributes: ['dn'],
    };

    const userSearchResult = await client.search('ou=Users,dc=example,dc=com', userSearchOptions);
    const [userEntry] = userSearchResult.entries;

    if (!userEntry) {
      throw new Error('User not found');
    }

    const userDN = userEntry.dn.toString();

    // Search for groups starting with the specified prefix
    const groupSearchFilter = `(&(cn=${prefix}*)(member=${userDN}))`;
    const groupSearchOptions = {
      scope: 'sub',
      filter: groupSearchFilter,
      attributes: ['cn'],
    };

    const groupSearchResult = await client.search('ou=Groups,dc=example,dc=com', groupSearchOptions);
    const groupEntries = groupSearchResult.entries;

    const groupNames = groupEntries.map(entry => entry.cn.toString());

    return groupNames;
  } catch (error) {
    throw error;
  } finally {
    await client.unbind();
  }
}

(async () => {
  try {
    const username = 'user123';
    const groupPrefix = 'APP_';

    const userGroups = await getUserGroupsStartingWithPrefix(username, groupPrefix);
    console.log(`Groups for user ${username} starting with ${groupPrefix}:`, userGroups);
  } catch (error) {
    console.error('Error:', error.message);
  }
})();
