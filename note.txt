const { placeholders, values } = Object.keys(conditions).reduce(
    (acc, key, index) => {
      acc.placeholders.push(`${key} = $${index + 1}`);
      acc.values.push(conditions[key]);
      return acc;
    },
    { placeholders: [] as string[], values: [] as any[] }
  );


















export class CustomDataSource extends DataSource {

  async executeDynamicQuery(query: string, params: DynamicQueryParams): Promise<any> {
    const { conditions, operatorForConditions, orderByConditions, appendToQuery } = params;

    const { placeholders, values } = this.buildDynamicConditions(conditions, operatorForConditions);

    query += placeholders.length ? ` WHERE ${placeholders.join(' AND ')}` : '';
    query += orderByConditions?.length ? ` ORDER BY ${orderByConditions.join(', ')}` : '';
    query += appendToQuery ? ` ${appendToQuery}` : '';

    const result = await this.query(query, values);

    return result;
  }

  private buildDynamicConditions(
    conditions: Record<string, string | number | string[] | number[]>,
    operatorForConditions?: Record<string, string>
  ): { placeholders: string[], values: any[] } {
    const placeholders: string[] = [];
    const values: any[] = [];

    Object.entries(conditions).forEach(([key, value]) => {
      if (Array.isArray(value)) {
        this.buildArrayConditions(key, value, placeholders, values);
      } else {
        const operator = operatorForConditions?.[key] || Operators.EQUALS;
        placeholders.push(`${key} ${operator} @${values.length}`);
        values.push(value);
      }
    });

    return { placeholders, values };
  }

  private buildArrayConditions(
    key: string,
    arr: (string | number)[],
    placeholders: string[],
    values: any[]
  ): void {
    if (arr.length === 0) {
      throw new Error(`Condition: ${key} cannot be an empty array`);
    }

    if (arr.length === 1) {
      const value = arr[0];
      const placeholder = typeof value === 'number' ? `${key} ${Operators.EQUALS} ${value}` : `${key} ${Operators.EQUALS} @${values.length}`;
      placeholders.push(placeholder);

      if (typeof value !== 'number') {
        values.push(value);
      }
    } else {
      const isNumberArray = typeof arr[0] === 'number';
      const placeholder = isNumberArray ? `${key} ${Operators.IN} (${arr.join(',')})` : `${key} ${Operators.IN} (${Array.from({ length: arr.length }, (_, i) => `@${values.length + i}`).join(', ')})`;

      placeholders.push(placeholder);

      if (!isNumberArray) {
        values.push(...arr);
      }
    }
  }
}

interface DynamicQueryParams {
  conditions: Record<string, string | number | string[] | number[]>;
  operatorForConditions?: Record<string, string>;
  orderByConditions?: string[];
  appendToQuery?: string;
}
