import { Component, Input } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Observable } from 'rxjs';
import { debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';
import { ApiService } from '../api.service';

interface Option {
  id: string;
  name: string;
}

@Component({
  selector: 'app-multiselect-autocomplete',
  templateUrl: './multiselect-autocomplete.component.html',
  styleUrls: ['./multiselect-autocomplete.component.css'],
})
export class MultiselectAutocompleteComponent {
  @Input() optionsService!: ApiService;
  @Input() displayProp!: keyof Option;
  @Input() valueProp!: keyof Option;
  @Input() label!: string;
  @Input() placeholder!: string;
  @Input() required!: boolean;
  @Input() disabled!: boolean;
  @Input() error!: string;
  @Input() selectedOptions: Option[] = [];
  @Input() maxSelectedOptions!: number;

  options: Option[] = [];
  filteredOptions!: Observable<Option[]>;
  formControl = new FormControl();

  loading = false;

  ngOnInit() {
    this.filteredOptions = this.formControl.valueChanges.pipe(
      debounceTime(300),
      distinctUntilChanged(),
      switchMap((searchTerm) => {
        this.loading = true;
        return this.optionsService.getOptions(searchTerm).pipe(
          // Here we map the API response to an array of Option objects
          map((options: any[]) =>
            options.map((option) => ({ id: option.id, name: option.name }))
          ),
          // After the API call is complete, set loading to false
          // and filter the options based on the search term
          tap(() => (this.loading = false)),
          map((options) =>
            searchTerm ? this.filterOptions(searchTerm, options) : options
          )
        );
      })
    );
  }

  filterOptions(searchTerm: string, options: Option[]): Option[] {
    const filterValue = searchTerm.toLowerCase();
    return options.filter(
      (option) =>
        option[this.displayProp].toLowerCase().indexOf(filterValue) !== -1
    );
  }

  displayFn(option: Option): string {
    return option && option[this.displayProp] ? option[this.displayProp] : '';
  }

  addOption(option: Option) {
    if (this.selectedOptions.length >= this.maxSelectedOptions) {
      return;
    }
    this.selectedOptions.push(option);
    this.formControl.setValue(null);
  }

  removeOption(option: Option) {
    const index = this.selectedOptions.indexOf(option);
    if (index >= 0) {
      this.selectedOptions.splice(index, 1);
    }
  }
}