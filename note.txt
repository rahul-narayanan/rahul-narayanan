// app.state.ts

import { State, Action, StateContext } from '@ngxs/store';

// Define the structure of your state
export interface AppStateModel {
  counter: number;
}

@State<AppStateModel>({
  name: 'app',
  defaults: {
    counter: 0,
  },
})
export class AppState {
  // Define actions to modify the state
  @Action(Increment)
  increment({ getState, patchState }: StateContext<AppStateModel>) {
    const state = getState();
    patchState({
      counter: state.counter + 1,
    });
  }
}

// Define actions to interact with the state
export class Increment {
  static readonly type = '[App] Increment';
}










// app.component.ts

import { Component } from '@angular/core';
import { Store } from '@ngxs/store';
import { Increment } from './app.state'; // Import the action

@Component({
  selector: 'app-root',
  template: `
    <div>
      <p>Counter: {{ counter$ | async }}</p>
      <button (click)="increment()">Increment</button>
    </div>
  `,
})
export class AppComponent {
  counter$ = this.store.select((state) => state.app.counter); // Select the counter from the state

  constructor(private store: Store) {}

  increment() {
    this.store.dispatch(new Increment()); // Dispatch the Increment action
  }
}






// app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { NgxsModule } from '@ngxs/store';
import { NgxsLoggerPluginModule } from '@ngxs/logger-plugin';
import { environment } from '../environments/environment';
import { AppComponent } from './app.component';
import { AppState } from './app.state';

@NgModule({
  declarations: [AppComponent],
  imports: [
    BrowserModule,
    NgxsModule.forRoot([AppState]),
    NgxsLoggerPluginModule.forRoot(),
  ],
  bootstrap: [AppComponent],
})
export class AppModule {}
