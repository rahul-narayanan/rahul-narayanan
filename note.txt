import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';

export interface Option {
  id: number;
  name: string;
}

export interface AutocompleteMultiSelectProps<T> {
  apiService: {
    getOptions(searchTerm: string): Observable<T[]>;
  };
  placeholder: string;
  selectedOptions?: T[];
}

@Component({
  selector: 'app-autocomplete-multi-select',
  templateUrl: './autocomplete-multi-select.component.html',
  styleUrls: ['./autocomplete-multi-select.component.css']
})
export class AutocompleteMultiSelectComponent<T extends Option> {
  @Input() props: AutocompleteMultiSelectProps<T>;
  @Output() selectionChange = new EventEmitter<T[]>();

  searchInput$ = new Subject<string>();
  options$: Observable<T[]>;

  selectedOptions: T[] = [];

  constructor() {}

  ngOnInit() {
    this.options$ = this.searchInput$.pipe(
      debounceTime(200),
      distinctUntilChanged(),
      switchMap((searchTerm: string) =>
        this.props.apiService.getOptions(searchTerm)
      )
    );

    if (this.props.selectedOptions) {
      this.selectedOptions = this.props.selectedOptions;
    }
  }

  onOptionSelected(option: T) {
    if (!this.selectedOptions.find(o => o.id === option.id)) {
      this.selectedOptions.push(option);
      this.selectionChange.emit(this.selectedOptions);
    }
  }

  onOptionRemoved(option: T) {
    this.selectedOptions = this.selectedOptions.filter(o => o.id !== option.id);
    this.selectionChange.emit(this.selectedOptions);
  }
}