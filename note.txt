if (data.length === 0) {
        return; // No need to execute if the data array is empty
    }

    // Get the keys from the first object in the data array
    const keys = Object.keys(data[0]);

    // Build the values section for the USING clause
    const values = data.map(obj =>
        `(${keys.map(key => `@${key}`).join(', ')})`
    ).join(', ');

    // Build the SET clause for both update and insert parts of the MERGE statement
    const setClause = keys.map(key => `${key} = source.${key}`).join(', ');

    // Build the ON condition for the MERGE statement based on all the keys
    const onCondition = keys.map(key => `target.${key} = source.${key}`).join(' AND ');

    // Build the MERGE statement dynamically
    const mergeQuery = `
        MERGE INTO ${tableName} AS target
        USING (VALUES ${values}) AS source (${keys.map(key => `@${key}`).join(', ')})
        ON ${onCondition}
        WHEN MATCHED THEN
            UPDATE SET ${setClause}
        WHEN NOT MATCHED THEN
            INSERT (${keys.join(', ')}) VALUES (${keys.map(key => `@${key}`).join(', ')});
    `;

    // Prepare parameters
    const parameters: { [key: string]: any } = {};
    data.forEach((obj, index) => {
        keys.forEach(key => {
            parameters[`${key}${index}`] = obj[key];
        });
    });

    // Execute the MERGE statement with parameters
    await dataSource.query(mergeQuery, parameters);
