import { Company } from './company.entity';

@EntityRepository(Company)
export class CompanyRepository extends Repository<Company> {
  async getCompaniesWithCounts(): Promise<Company[]> {
    return this.createQueryBuilder('company')
      .addSelect((subQuery) => {
        subQuery
          .select('COUNT(user.id)', 'userCount')
          .from('user', 'user')
          .where('user.companyId = company.id');
      }, 'userCount')
      .addSelect((subQuery) => {
        subQuery
          .select('COUNT(account.id)', 'accountCount')
          .from('account', 'account')
          .where('account.companyId = company.id');
      }, 'accountCount')
      .addSelect((subQuery) => {
        subQuery
          .select('COUNT(group.id)', 'groupCount')
          .from('group', 'group')
          .where('group.companyId = company.id');
      }, 'groupCount')
      .getRawMany();
  }
}




// html-sanitize.decorator.ts
import { SetMetadata } from '@nestjs/common';
import * as DOMPurify from 'dompurify';

export const HtmlSanitize = (property: string) => {
  return (target, key) => {
    SetMetadata('htmlSanitizeProperty', property)(target, key);
  };
};

export const getHtmlSanitizeProperty = (target: any, key: string) => {
  const property = Reflect.getMetadata('htmlSanitizeProperty', target, key);
  return property || null;
};

export const sanitizeHtmlProperty = (value: string): string => {
  return DOMPurify.sanitize(value);
};


